// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EnhancedStorage {
    address public owner;
    string public storedData;
    uint256 public version;

    event DataStored(address indexed user, string data, uint256 indexed version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;
        version = 1;
    }

    function set(string memory newData) external onlyOwner {
        require(keccak256(bytes(newData)) != keccak256(bytes(storedData)), "New data must be different from current data");

        storedData = newData;
        version++;
        emit DataStored(msg.sender, newData, version);
    }

    function get() external view returns (string memory, uint256) {
        return (storedData, version);
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "New owner cannot be the zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    function revokeOwnership() external onlyOwner {
        emit OwnershipTransferred(owner, address(0));
        owner = address(0);
    }
}
